#!/usr/bin/python
import sys, os, re, shutil
 
# example file that is adapted:
source_world='oa_challenge.world'
# read world file from example
location= '/home/jay/autopilot_ws/src/autopilot/worlds/'
# create destination folder tmp
directory='/home/jay/autopilot_ws/src/autopilot/worlds/auto_generated'
# description of worlds
description_file_handle = open('/home/jay/autopilot_ws/src/autopilot/worlds/description.txt','w')

if not os.path.exists(directory):
    os.makedirs(directory)
    
f_sdf = open(location+source_world,'r')
sdf = f_sdf.read()

y_c = 14 #3 positions of the obstacles are: -14, 0, 14
order_options = [] #6 possible options in which 3 objects are ordered
order_options.append([-y_c, 0, y_c])
order_options.append([-y_c, y_c, 0])
order_options.append([0, y_c, -y_c])
order_options.append([0, -y_c, y_c])
order_options.append([y_c, 0, -y_c])
order_options.append([y_c, -y_c, 0])

#4 options for where the opening in the wall is supposed to be
wall_options = [-7.5, -2.5, 2.5, 7.5]
#wall_options = [-7.5, -3.5, 3.5, 7.5]

#2 options for the position of the ceiling
max_ceiling_height = 1.5
ceiling_options = [4, 3.75]

#2 options for the position of the block
max_block_height = 1.5
block_options = [0, max_block_height/2]

counter=0

#### loop starts here
for i_y in range(len(order_options)): # 6 order options
    for i_w in range(len(wall_options)): # 4 positions for the wall
        for i_c in range(len(ceiling_options)): # 2 sizes for the ceiling (positions)
            for i_b in range(len(block_options)): # 2 sizes for block (positions)
                x={'wall':wall_options[i_w], 'ceiling':0, 'block':0}#fixed for ceiling and block, 4values for wall:
                y={'wall':order_options[i_y][0], 'ceiling':order_options[i_y][1], 'block':order_options[i_y][2]}#swap between these 3 values according to the order (wall-ceiling-block)
                z={'wall':2, 'ceiling':ceiling_options[i_c], 'block':block_options[i_b]}#wall stays fixed but ceiling and block changes

                # define poses of obstacles
                obstacles = ['wall', 'ceiling', 'block']
                for obstacle in obstacles:
                    print 'obstacle: ', obstacle
                    # change pose of model (but not of link...)
                    expr = "<model name=\W"+obstacle+"[\W]+pose>[\W]*\d\.?[\d]*[\s][\W]*\d\.?[\d]*[\s]*[\W]*\d\.?[\d]*"
                    matches = re.findall(expr, sdf)
                    #There should be only one match
                    if len(matches)>1: raise IOError('found more than 1 match. Very confusing :-(')
                    expr = "<model name='"+obstacle+"'>\n        <pose>"+str(x[obstacle])+" "+str(y[obstacle])+" "+str(z[obstacle])
                    sdf=re.sub(matches[0],expr,sdf)
                    
                    # change pose of link as well
                    expr = "<model name=\W"+obstacle+"[\W]+pose>[\W]*\d\.?[\d]*[\s][\W]*\d\.?[\d]*[\s]*[\W]*\d\.?[\d]*[\s][\W]*[\d]+\.?[\d]*[\s][\W]*\d\.?[\d]*[\s][\W]*\d\.?[\d]*</pose>[\W]*link name=\'link\'[\W]+pose[\W]*\d\.?[\d]*[\s][\W]*\d\.?[\d]*[\s]*[\W]*\d\.?[\d]*"
                    matches = re.findall(expr, sdf)
                    #There should be only one match
                    if len(matches)>1: raise IOError('found more than 1 match. Very confusing :-(')
                    
                    print '$$$$ pose and link: ', matches[0]
                    
                    #cut off the first pose
                    expr = "link name=\'link\'[\W]+pose[\W]*\d\.?[\d]*[\s][\W]*\d\.?[\d]*[\s]*[\W]*\d\.?[\d]*"
                    matches_short = re.findall(expr, matches[0])
                    print '$$$$ link: ', matches_short[0]
                    
                    #There should be only one match
                    if len(matches_short)>1: raise IOError('found more than 1 match. Very confusing :-(')
                    expr = "link name=\'link\'>\n          <pose>"+str(x[obstacle])+" "+str(y[obstacle])+" "+str(z[obstacle])
                    matches_new=re.sub(matches_short[0],expr,matches[0])
                    sdf=re.sub(matches[0],matches_new,sdf)
                    
                    #------------------------------debugging purpose
                    expr="<model name=\W"+obstacle+"[\W]+pose>[\W]*\d\.?[\d]*[\s][\W]*\d\.?[\d]*[\s]*[\W]*\d\.?[\d]*"
                    matches = re.findall(expr, sdf)
                    print matches
                # save world file in ./tmp folder
		world_name=directory+'/{:04d}.world'.format(counter)
                new_sdf = open(world_name,'w')
                new_sdf.write(sdf)
		# description
		description = '/{:04d}'.format(counter) + ': '+'wall_y: '+str(order_options[i_y][0])+ ' ceiling_y: '+str(order_options[i_y][1])+ ' block_y '+str(order_options[i_y][2])+'\n'+'wall_pos_x : '+str(wall_options[i_w])+'\n'+'ceiling_z: '+str(ceiling_options[i_c])+' block_z: '+str(block_options[i_b])+'\n'
		description_file_handle.write(description)
		counter=counter+1
